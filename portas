
Pino Digital (NodeMCU)	GPIO (Código)
D0	GPIO16
D1	GPIO5
D2	GPIO4
D3	GPIO0
D4	GPIO2
D5	GPIO14
D6	GPIO12
D7	GPIO13
D8	GPIO15
-/------------------------------------------------------------------------------
from time import sleep

import machine
import time
from machine import Pin

# Configuração do pino do sensor de gás
sensor_gas = machine.ADC(0)  # Conecte o MQ-8 ao pino A0

# Configuração do buzzer (D5 - GPIO 14)
buzzer = machine.PWM(machine.Pin(14))  # D5 é GPIO 14 no ESP8266

# Configuração dos LEDs (D6 e D7)
led_verde = Pin(0, Pin.OUT)  # GPIO 12 (D6)
led_vermelho = Pin(2, Pin.OUT)  # GPIO 13 (D7)

# Função para ler o sensor de gás
def ler_sensor_gas():
    valor_bruto = sensor_gas.read()  # Lê o valor do sensor
    # Converter o valor bruto para uma escala mais significativa (percentual)
    valor_convertido = (valor_bruto / 1023) * 100  # Converte para percentual
    return valor_convertido

# Função para tocar o buzzer
def tocar_buzzer(frequencia=1000):  # Frequência padrão de 1000 Hz
    buzzer.freq(frequencia)  # Define a frequência do buzzer
    buzzer.duty(512)  # Define a intensidade (valor entre 0 e 1023)
    time.sleep(3)  # O buzzer tocará por 3 segundos
    buzzer.duty(0)  # Desliga o buzzer

# Função principal para monitorar o sensor de gás e controlar LEDs e buzzer
def monitorar_gas():
    while True:
        valor_gas = ler_sensor_gas()
        print('Nível de gás detectado: {:.2f}%'.format(valor_gas))

        # Limite ajustado para 10% de presença de gases inflamáveis ou fumaça
        if valor_gas > 10:  # Limite de alerta
            print('Alerta: Nível perigoso de gás detectado!')
            led_vermelho.value(1)  # Acende o LED vermelho
            sleep(0.5)
            led_vermelho.value(0)  # Acende o LED vermelho
            led_verde.value(0)  # Apaga o LED verde
            tocar_buzzer()  # Ativa o buzzer
        else:
            print('Nível de gás seguro.')
            led_verde.value(1)  # Acende o LED verde
            led_vermelho.value(0)  # Apaga o LED vermelho

        time.sleep(1)  # Atraso de 1 segundo entre leituras

# Iniciar o monitoramento do sensor de gás
monitorar_gas()
-----------------
# Informações do envio da mensagem
phone_number = '559185045312'
api_key = '7872715'

# Função para enviar mensagem
def send_message():

    url = 'https://api.callmebot.com/whatsapp.php?phone=559185045312&text=VAZAMENTO+DE+GAS+DETECTADO&apikey=7872715'
    -------------------------------# Informações do envio da mensagem
phone_number = '559185974371'
api_key = '6584272'

# Função para enviar mensagem
def send_message():

    url = 'https://api.callmebot.com/whatsapp.php?phone=559185974371&text=VAZAMENTO+DE+GAS+DETECTADO&apikey=6584272'